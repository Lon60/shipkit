services:
  docker-control:
    image: ghcr.io/lon60/shipkit-docker-control:latest
    environment:
      DOCKER_CONTROL_PORT: ${DOCKER_CONTROL_PORT}
      DOCKER_CONTROL_DEPLOYMENTS_DIR: /deployments
      DOCKER_CONTROL_LOG_LEVEL: ${DOCKER_CONTROL_LOG_LEVEL}
    networks:
      - shipkit
    volumes:
      - docker_deployments:/deployments
      - ${DOCKER_SOCKET_PATH}:/var/run/docker.sock

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: shipkit_gateaway
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - shipkit

  gateway-api:
    image: ghcr.io/lon60/shipkit-gateway-api:latest
    depends_on:
      - postgres
      - docker-control
    user: root
    environment:
      DATABASE_URL: jdbc:postgresql://postgres:5432/shipkit_gateaway
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION_MS: ${JWT_EXPIRATION_MS}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      DOCKER_CONTROL_HOST: docker-control
      DOCKER_CONTROL_PORT: ${DOCKER_CONTROL_PORT}
      NGINX_VHOST_OUTPUT_DIR: /etc/nginx/conf.d
    expose:
      - "8080"
    networks:
      - shipkit
    volumes:
      - nginx_dynamic:/etc/nginx/conf.d
      - ./scripts/nginx/snippets:/etc/nginx/snippets:ro
      - ./scripts/nginx/shipkit-default.conf:/etc/nginx/conf.d/default.conf:ro

  frontend:
    image: ghcr.io/lon60/shipkit-frontend:latest
    depends_on:
      - gateway-api
    environment:
      API_BASE_URL: /api
      NEXT_PUBLIC_APP_NAME: ${NEXT_PUBLIC_APP_NAME}
    expose:
      - "3000"
    networks:
      - shipkit

  nginx:
    image: nginx:1.25-alpine
    container_name: nginx
    depends_on:
      - gateway-api
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - nginx_dynamic:/etc/nginx/conf.d
      - ./scripts/nginx/snippets:/etc/nginx/snippets:ro
      - ./scripts/nginx/shipkit-default.conf:/etc/nginx/conf.d/default.conf:ro
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    networks:
      - shipkit

  certbot:
    image: certbot/certbot
    volumes:
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    entrypoint: >
      sh -c "
        trap exit TERM;
        while :; do
          certbot renew --webroot -w /var/www/certbot --quiet;
          sleep 12h & wait $${!};
        done;
      "

networks:
  shipkit:

volumes:
  postgres_data:
  docker_deployments: 
  nginx_dynamic: 
  certbot_certs:
  certbot_www:
