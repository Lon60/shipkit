services:
  docker-control:
    image: ghcr.io/lon60/shipkit-docker-control:latest
    environment:
      DOCKER_CONTROL_PORT: ${DOCKER_CONTROL_PORT}
      DOCKER_CONTROL_DEPLOYMENTS_DIR: /deployments
      DOCKER_CONTROL_LOG_LEVEL: ${DOCKER_CONTROL_LOG_LEVEL}
    networks:
      - shipkit
    volumes:
      - docker_deployments:/deployments

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_DB: shipkit_gateaway
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - shipkit

  gateway-api:
    image: ghcr.io/lon60/shipkit-gateway-api:latest
    depends_on:
      - postgres
      - docker-control
    environment:
      DATABASE_URL: jdbc:postgresql://postgres:5432/shipkit_gateaway
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION_MS: ${JWT_EXPIRATION_MS}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      DOCKER_CONTROL_HOST: docker-control
      DOCKER_CONTROL_PORT: ${DOCKER_CONTROL_PORT}
    ports:
      - "8080:8080"
    networks:
      - shipkit

  frontend:
    image: ghcr.io/lon60/shipkit-frontend:latest
    depends_on:
      - gateway-api
    environment:
      NEXT_PUBLIC_GRAPHQL_URL: ${NEXT_PUBLIC_GRAPHQL_URL}
      NEXT_PUBLIC_APP_NAME: ${NEXT_PUBLIC_APP_NAME}
    ports:
      - "3000:3000"
    networks:
      - shipkit

networks:
  shipkit:

volumes:
  postgres_data:
  docker_deployments: 
