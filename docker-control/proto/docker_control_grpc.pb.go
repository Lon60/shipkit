// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/docker_control.proto

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DockerControlService_StartCompose_FullMethodName = "/docker_control.DockerControlService/StartCompose"
	DockerControlService_StopApp_FullMethodName      = "/docker_control.DockerControlService/StopApp"
	DockerControlService_GetStatus_FullMethodName    = "/docker_control.DockerControlService/GetStatus"
	DockerControlService_ReloadNginx_FullMethodName  = "/docker_control.DockerControlService/ReloadNginx"
)

// DockerControlServiceClient is the client API for DockerControlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DockerControlServiceClient interface {
	StartCompose(ctx context.Context, in *StartComposeRequest, opts ...grpc.CallOption) (*ActionResult, error)
	StopApp(ctx context.Context, in *StopAppRequest, opts ...grpc.CallOption) (*ActionResult, error)
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*AppStatus, error)
	ReloadNginx(ctx context.Context, in *ReloadNginxRequest, opts ...grpc.CallOption) (*ActionResult, error)
}

type dockerControlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDockerControlServiceClient(cc grpc.ClientConnInterface) DockerControlServiceClient {
	return &dockerControlServiceClient{cc}
}

func (c *dockerControlServiceClient) StartCompose(ctx context.Context, in *StartComposeRequest, opts ...grpc.CallOption) (*ActionResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActionResult)
	err := c.cc.Invoke(ctx, DockerControlService_StartCompose_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerControlServiceClient) StopApp(ctx context.Context, in *StopAppRequest, opts ...grpc.CallOption) (*ActionResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActionResult)
	err := c.cc.Invoke(ctx, DockerControlService_StopApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerControlServiceClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*AppStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppStatus)
	err := c.cc.Invoke(ctx, DockerControlService_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerControlServiceClient) ReloadNginx(ctx context.Context, in *ReloadNginxRequest, opts ...grpc.CallOption) (*ActionResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActionResult)
	err := c.cc.Invoke(ctx, DockerControlService_ReloadNginx_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DockerControlServiceServer is the server API for DockerControlService service.
// All implementations must embed UnimplementedDockerControlServiceServer
// for forward compatibility.
type DockerControlServiceServer interface {
	StartCompose(context.Context, *StartComposeRequest) (*ActionResult, error)
	StopApp(context.Context, *StopAppRequest) (*ActionResult, error)
	GetStatus(context.Context, *GetStatusRequest) (*AppStatus, error)
	// Reload the NGINX process within the specified container (e.g., service name "nginx")
	ReloadNginx(context.Context, *ReloadNginxRequest) (*ActionResult, error)
	mustEmbedUnimplementedDockerControlServiceServer()
}

// UnimplementedDockerControlServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDockerControlServiceServer struct{}

func (UnimplementedDockerControlServiceServer) StartCompose(context.Context, *StartComposeRequest) (*ActionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCompose not implemented")
}
func (UnimplementedDockerControlServiceServer) StopApp(context.Context, *StopAppRequest) (*ActionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopApp not implemented")
}
func (UnimplementedDockerControlServiceServer) GetStatus(context.Context, *GetStatusRequest) (*AppStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedDockerControlServiceServer) ReloadNginx(context.Context, *ReloadNginxRequest) (*ActionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadNginx not implemented")
}
func (UnimplementedDockerControlServiceServer) mustEmbedUnimplementedDockerControlServiceServer() {}
func (UnimplementedDockerControlServiceServer) testEmbeddedByValue()                              {}

// UnsafeDockerControlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DockerControlServiceServer will
// result in compilation errors.
type UnsafeDockerControlServiceServer interface {
	mustEmbedUnimplementedDockerControlServiceServer()
}

func RegisterDockerControlServiceServer(s grpc.ServiceRegistrar, srv DockerControlServiceServer) {
	// If the following call pancis, it indicates UnimplementedDockerControlServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DockerControlService_ServiceDesc, srv)
}

func _DockerControlService_StartCompose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartComposeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerControlServiceServer).StartCompose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DockerControlService_StartCompose_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerControlServiceServer).StartCompose(ctx, req.(*StartComposeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerControlService_StopApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerControlServiceServer).StopApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DockerControlService_StopApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerControlServiceServer).StopApp(ctx, req.(*StopAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerControlService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerControlServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DockerControlService_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerControlServiceServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DockerControlService_ReloadNginx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadNginxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerControlServiceServer).ReloadNginx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DockerControlService_ReloadNginx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerControlServiceServer).ReloadNginx(ctx, req.(*ReloadNginxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DockerControlService_ServiceDesc is the grpc.ServiceDesc for DockerControlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DockerControlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "docker_control.DockerControlService",
	HandlerType: (*DockerControlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartCompose",
			Handler:    _DockerControlService_StartCompose_Handler,
		},
		{
			MethodName: "StopApp",
			Handler:    _DockerControlService_StopApp_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _DockerControlService_GetStatus_Handler,
		},
		{
			MethodName: "ReloadNginx",
			Handler:    _DockerControlService_ReloadNginx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/docker_control.proto",
}
